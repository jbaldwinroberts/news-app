// Package Swagger provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Swagger

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/pkg/errors"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Feed defines model for Feed.
type Feed struct {
	Categories  *[]string `json:"categories,omitempty"`
	Description string    `json:"description"`
	Image       Image     `json:"image"`
	Items       Items     `json:"items"`
	Link        string    `json:"link"`
	Title       string    `json:"title"`
}

// Feeds defines model for Feeds.
type Feeds struct {
	AdditionalProperties map[string]Feed `json:"-"`
}

// Image defines model for Image.
type Image struct {
	Title *string `json:"title,omitempty"`
	Url   *string `json:"url,omitempty"`
}

// Item defines model for Item.
type Item struct {
	Category        string     `json:"category"`
	Description     string     `json:"description"`
	Guid            string     `json:"guid"`
	Image           Image      `json:"image"`
	Link            string     `json:"link"`
	Published       string     `json:"published"`
	PublishedParsed *time.Time `json:"publishedParsed,omitempty"`
	Title           string     `json:"title"`
}

// Items defines model for Items.
type Items struct {
	AdditionalProperties map[string]Item `json:"-"`
}

// GetItemsParams defines parameters for GetItems.
type GetItemsParams struct {
	Titles     *[]string `json:"titles,omitempty"`
	Categories *[]string `json:"categories,omitempty"`
	Limit      *int32    `json:"limit,omitempty"`
}

// Getter for additional properties for Feeds. Returns the specified
// element and whether it was found
func (a Feeds) Get(fieldName string) (value Feed, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Feeds
func (a *Feeds) Set(fieldName string, value Feed) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Feed)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Feeds to handle AdditionalProperties
func (a *Feeds) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Feed)
		for fieldName, fieldBuf := range object {
			var fieldVal Feed
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Feeds to handle AdditionalProperties
func (a Feeds) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Items. Returns the specified
// element and whether it was found
func (a Items) Get(fieldName string) (value Item, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Items
func (a *Items) Set(fieldName string, value Item) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Item)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Items to handle AdditionalProperties
func (a *Items) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Item)
		for fieldName, fieldBuf := range object {
			var fieldVal Item
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Items to handle AdditionalProperties
func (a Items) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(req *http.Request, ctx context.Context) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// HTTP client with any customized settings, such as certificate chains.
	Client http.Client

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCategories request
	GetCategories(ctx context.Context) (*http.Response, error)

	// GetItems request
	GetItems(ctx context.Context, params *GetItemsParams) (*http.Response, error)

	// GetTitles request
	GetTitles(ctx context.Context) (*http.Response, error)
}

func (c *Client) GetCategories(ctx context.Context) (*http.Response, error) {
	req, err := NewGetCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetItems(ctx context.Context, params *GetItemsParams) (*http.Response, error) {
	req, err := NewGetItemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTitles(ctx context.Context) (*http.Response, error) {
	req, err := NewGetTitlesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetCategoriesRequest generates requests for GetCategories
func NewGetCategoriesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/categories", server)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetItemsRequest generates requests for GetItems
func NewGetItemsRequest(server string, params *GetItemsParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/items", server)

	var queryStrings []string

	var queryParam0 string
	if params.Titles != nil {

		queryParam0, err = runtime.StyleParam("form", true, "titles", *params.Titles)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	var queryParam1 string
	if params.Categories != nil {

		queryParam1, err = runtime.StyleParam("form", true, "categories", *params.Categories)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	var queryParam2 string
	if params.Limit != nil {

		queryParam2, err = runtime.StyleParam("form", true, "limit", *params.Limit)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam2)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTitlesRequest generates requests for GetTitles
func NewGetTitlesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/titles", server)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses returns a ClientWithResponses with a default Client:
func NewClientWithResponses(server string) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client: http.Client{},
			Server: server,
		},
	}
}

// NewClientWithResponsesAndRequestEditorFunc takes in a RequestEditorFn callback function and returns a ClientWithResponses with a default Client:
func NewClientWithResponsesAndRequestEditorFunc(server string, reqEditorFn RequestEditorFn) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client:        http.Client{},
			Server:        server,
			RequestEditor: reqEditorFn,
		},
	}
}

type getCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r getCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Item
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r getItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getTitlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r getTitlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getTitlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCategoriesWithResponse request returning *GetCategoriesResponse
func (c *ClientWithResponses) GetCategoriesWithResponse(ctx context.Context) (*getCategoriesResponse, error) {
	rsp, err := c.GetCategories(ctx)
	if err != nil {
		return nil, err
	}
	return ParsegetCategoriesResponse(rsp)
}

// GetItemsWithResponse request returning *GetItemsResponse
func (c *ClientWithResponses) GetItemsWithResponse(ctx context.Context, params *GetItemsParams) (*getItemsResponse, error) {
	rsp, err := c.GetItems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParsegetItemsResponse(rsp)
}

// GetTitlesWithResponse request returning *GetTitlesResponse
func (c *ClientWithResponses) GetTitlesWithResponse(ctx context.Context) (*getTitlesResponse, error) {
	rsp, err := c.GetTitles(ctx)
	if err != nil {
		return nil, err
	}
	return ParsegetTitlesResponse(rsp)
}

// ParsegetCategoriesResponse parses an HTTP response from a GetCategoriesWithResponse call
func ParsegetCategoriesResponse(rsp *http.Response) (*getCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &[]string{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetItemsResponse parses an HTTP response from a GetItemsWithResponse call
func ParsegetItemsResponse(rsp *http.Response) (*getItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &[]Item{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetTitlesResponse parses an HTTP response from a GetTitlesWithResponse call
func ParsegetTitlesResponse(rsp *http.Response) (*getTitlesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getTitlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &[]string{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (GET /categories)
	GetCategories(ctx echo.Context) error
	// (GET /items)
	GetItems(ctx echo.Context, params GetItemsParams) error
	// (GET /titles)
	GetTitles(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategories(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCategories(ctx)
	return err
}

// GetItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetItems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetItemsParams
	// ------------- Optional query parameter "titles" -------------
	if paramValue := ctx.QueryParam("titles"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "titles", ctx.QueryParams(), &params.Titles)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter titles: %s", err))
	}

	// ------------- Optional query parameter "categories" -------------
	if paramValue := ctx.QueryParam("categories"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "categories", ctx.QueryParams(), &params.Categories)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter categories: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetItems(ctx, params)
	return err
}

// GetTitles converts echo context to params.
func (w *ServerInterfaceWrapper) GetTitles(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTitles(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/categories", wrapper.GetCategories)
	router.GET("/items", wrapper.GetItems)
	router.GET("/titles", wrapper.GetTitles)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWXU/rRhD9K6tpH1rJ2Gl481MjRKVUFYqgb5SHjT12lno/mF0TIuT/frVrO05unEAQ",
	"V5cnbO/szJlz5gx5hUxLoxUqZyF9BZutUPLweE2kyT8Y0gbJCQyfM52j/1toktxBCkK5yylE4DYG21cs",
	"kaCJQKK1vAzR3aF1JFQJTRMB4VMtCHNI79ucQ/zDNplePmLmfK6/0IcegOEOS03dm3Ao7Ui1bTpOxDf+",
	"PUebkTBOaDUaL2SH+1fCAlL4JRloSjqOknkI8tF93ZPRIaiJoBLq/3GQwlXvIKsN6/Lst9ID7yEdIzKA",
	"5Xku/C1eLfY4PdVEUKEZyTrvCdvX51hLEdRUjbd6mNqhPKr8ZjT5W/KWtcg/QfejSpp6WQm7wvz06YKT",
	"bWO2Zsq5wwsnJA6G+twB2fLWsbALtu//4YgKHx6bIOGhth64UIVu14pyPHP+ESUXFaTwGC95la+Fikkv",
	"kZz9s/QncaYlRKC49Ln+1hbNit22EQfiw0yx2WLOnGaG9LPIkSlcWxb8wQrSkj1zErq27PbujhXBHJ66",
	"DJUNXHd1ZoZnK2TTeALd8MLKOWPTJFmv1zEPx7GmMunu2uSf+dX1zd31xTSexCsnqx0J4caDmBnDfpst",
	"5r9DBM9ItkX8RzyJJz5WG1TcCEjhMnyKwHC3CmQn+4uvxEDcfue36GpSlnHFwt5jugj9seHuf34ivIjc",
	"35nnkPpUV0NuP1jWaN+OLzCdTHqtUIWS3JhKZOF68mhbu7Wqn7OQmwPZBoysR9BqW/C6cmeBODWY7f+4",
	"kfq1wheDmcOcYR/TRJBsO3o35cO4jbPdGstrS1yiQ7KQ3n+fOOgWZsf6US5E5ZDY0rtY+POnGoOlu2Ft",
	"I2F3LRS8shh9QJsIrNuEmfVLCppoFNuOXu/Al+1P2I/HKPmLkLVkqpZLJC8Loa0rF9BSUO0I1EpI4U6j",
	"fPOXUPPwWT46Y8ketVa7+r6Uq7p5PXuTtffGffXv4IGfssE6t34dnpvmWwAAAP//OaPRcu0LAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

